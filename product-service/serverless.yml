service: product-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev1
  region: us-east-1
  profile: sandx
  environment:
    SQS_URL: ${env:SQS_URL}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:978687357621:table/products"
    - Effect: "Allow"
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:us-east-1:978687357621:table/stocks"
    - Effect: "Allow"
      Action: 'sqs:*'
      Resource: "arn:aws:sqs:us-east-1:978687357621:aws-shop-catalog-items-queue"
    - Effect: "Allow"
      Action: 'sns:*'
      Resource: "arn:aws:sns:us-east-1:978687357621:aws-shop-sns-create-product-topic"

plugins:
  - serverless-auto-swagger
  - serverless-webpack

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  autoswagger:
    typefiles: []

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  getProducts:
    handler: handlers/getProducts.getProducts
    events:
      - httpApi:
          path: /products
          method: get
  catalogBatchProcess:
    handler: handlers/catalogBatchProcess.catalogBatchProcess
    events:
      - sqs:
          arn: "arn:aws:sqs:us-east-1:978687357621:aws-shop-catalog-items-queue"
          batchSize: 5
  getProductsById:
    handler: handlers/getProductsById.getProductsById
    events:
      - httpApi:
          path: /products/{productId}
          method: get
  createProduct:
    handler: handlers/createProduct.createProduct
    events:
      - httpApi:
          path: /products
          method: post
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

resources: # CloudFormation template syntax from here on.
  Resources:
    createProductTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: aws-shop-sns-create-product-topic
    createProductTopicGeneralEmailSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: ${env:FEED_EMAIL}
        Protocol: "email"
        TopicArn: "arn:aws:sns:us-east-1:978687357621:aws-shop-sns-create-product-topic"
    products:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: products
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    stocks:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: stocks
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
